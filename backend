Overall Architecture Flow
1. API Call: Client â†’ /api/diagnose endpoint (POST with chat text) : param -> chat
2. Controller: Receives the chat, calls the service
3. Service: Processes the chat, fetches diseases from the database, and performs text matching
4. Response: Constructs and returns a JSON response with the diagnosis
*/

// CONTROLLER - LAYER

package com.example.hackathon.controller;

import com.example.vaibhaw.service.DiagnosisService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class DiagnosisController {

    @Autowired
    private DiagnosisService diagnosisService;

    @PostMapping("/diagnose")
    public ResponseEntity<?> diagnose(@RequestParam String chat) {
        String diagnosis = diagnosisService.diagnoseDisease(chat);
        return ResponseEntity.ok(diagnosis);
    }
}


// SERVICE LAYER


package com.example.hackathon.service;

import com.example.vaibhaw.model.Disease;
import com.example.vaibhaw.repository.DiseaseRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DiagnosisService {

    @Autowired
    private DiseaseRepository diseaseRepository;

    public String diagnoseDisease(String chat) {
    String lowerChat = chat.toLowerCase();
    List<Disease> diseases = diseaseRepository.findAll();

    for (Disease disease : diseases) {
        // Split the stored symptoms (assumed to be comma-separated) into an array
        String[] symptomArray = disease.getSymptoms().split(",");
        boolean allSymptomsPresent = true;

        for (String symptom : symptomArray) {
            // Trim and convert to lowercase for uniform comparison
            String trimmedSymptom = symptom.trim().toLowerCase();
            if (!lowerChat.contains(trimmedSymptom)) {
                allSymptomsPresent = false;
                break;
            }
        }

        if (allSymptomsPresent) {
            return disease.getName();
        }
    }
    return "No diagnosis found";
}
   
}




// DISEASE ENTITY - FOR DB

package com.example.vaibhaw.model;

import javax.persistence.*;

@Entity
@Table(name = "diseases")
public class Disease {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    // A simple field that lists symptoms. In a real app you might use a separate table or more structured format.
    private String symptoms;

    public Disease() { }

    public Disease(String name, String symptoms) {
        this.name = name;
        this.symptoms = symptoms;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSymptoms() {
        return symptoms;
    }

    public void setSymptoms(String symptoms) {
        this.symptoms = symptoms;
    }
}




// REPOSITORY LAYER

package com.example.va.repository;

import com.example.vaibhaw.model.Disease;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface DiseaseRepository extends JpaRepository<Disease, Long> {
    // Custom query methods can be added here if needed.
}



// Application.properties

spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true








